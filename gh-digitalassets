#!/usr/bin/env python
# set -e

# echo "Hello gh-digitalassets!"
import argparse
from github import Github
import os

g = Github("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")
user = g.get_user()
parser = argparse.ArgumentParser(prog="digitalassets", description="Simple helper commands to interact with Github Repos")
# parser.add_argument("action",
#                     choices=["reponame","listcontents","uploadfile"],
#                     help="Operation on Github Repos")
# parser.add_argument("reponame")
subparser = parser.add_subparsers(dest='command',help="Testing help command")

reponame = subparser.add_parser("reponame")
createrepo = subparser.add_parser("createrepo",help="Testing help command")

####################
## empty repo command removed
# createemptyrepo = subparser.add_parser("createemprepo")
# createemptyrepo.add_argument("--reponame",type=str,required=True)
####################

createrepo.add_argument("--reponame",type=str,required=True,help="Give the name of the repo to be created")
createrepo.add_argument("--filepath",type=str,required=False,help= "Give a folder path to upload files. Not a required argument")
createrepo.add_argument("--empty",type=str,required=False,default="False",help="True if we need to create empty repo. By defualt False")

repo_name = 'ramchandra-ub/testrepo2'
repo = g.get_repo(repo_name)

args = parser.parse_args()

if args.command == "reponame":
    print(repo.name)
# elif args.command == "createemprepo":
#     ## create repo
#     createdRepo = user.create_repo(args.reponame)
#     print("Repo created with name "+ createdRepo.full_name)
if args.command == "createrepo":
    ## create repo
    if args.empty == "True":
        createdRepo = user.create_repo(args.reponame)
        createdRepoName = g.get_repo(createdRepo.full_name)
    else:
        createdRepo = user.create_repo(args.reponame)
        print("Repo created with name "+ createdRepo.full_name)
        createdRepoName = g.get_repo(createdRepo.full_name)

        ## read file content
        if os.path.isfile(args.filepath):
            with open(args.filepath) as file:
                fileContent = file.read()
            ## upload file to the repo
            # createdRepoName.create_file("testfile.txt","create file",fileContent,branch="main")

            createdRepoName.create_file(args.filepath.split('\\')[-1],"create file",fileContent,branch="main")
            print("testfile created in the repo" + createdRepo.full_name)
        if os.path.isdir(args.filepath):
            allFiles = os.listdir(args.filepath)
            print(allFiles)
            for files in allFiles:
                if files == ".git":
                    continue
                with open((os.path.join(args.filepath,files))) as file:
                    fileContent = file.read()
                ## upload file to the repo
                # createdRepoName.create_file("testfile.txt","create file",fileContent,branch="main")
                
                createdRepoName.create_file(files,"create file",fileContent,branch="main")
            print("All files in the specified directory uploaded")

    
# elif args.action == "listcontents":
#     contents = repo.get_contents("")
#     for content_file in contents:
#         print(content_file)
# elif args.action == "uploadfile":
    # try:
        # repo.create_file("test1.py", "test", "test", branch="main")
    # except:
    #     print("File already exists. Change the file name")



# Snippets to help get started:

# Determine if an executable is in the PATH
# if ! type -p ruby >/dev/null; then
#   echo "Ruby not found on the system" >&2
#   exit 1
# fi

# Pass arguments through to another command
# gh issue list "$@" -R cli/cli

# Using the gh api command to retrieve and format information
# QUERY='
#   query($endCursor: String) {
#     viewer {
#       repositories(first: 100, after: $endCursor) {
#         nodes {
#           nameWithOwner
#           stargazerCount
#         }
#       }
#     }
#   }
# '
# TEMPLATE='
#   {{- range $repo := .data.viewer.repositories.nodes -}}
#     {{- printf "name: %s - stargazers: %v\n" $repo.nameWithOwner $repo.stargazerCount -}}
#   {{- end -}}
# '
# exec gh api graphql -f query="${QUERY}" --paginate --template="${TEMPLATE}"
